AWSTemplateFormatVersion: "2010-09-09"

Description: An example template with an IAM role for a takss Lambda state machine.

Parameters:
  TableName:
    Description: The name of the table (the stack name will be pre-pended)
    Type: String
    Default: Tasks
    MinLength: "1"

Resources:
  TasksLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  TasksLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt TasksLambdaExecutionRole.Arn
      Code: ../tasks-lambda.zip
      Runtime: python3.11
      Timeout: 900
      Handler: tasks.adapter.lambda_function.lambda_handler
      Architectures:
        - arm64
      Environment:
        Variables:
          KVSTORE_DYNAMODB_TABLE_NAME: !Sub '${AWS::StackName}-${TableName}'

          # How much time to make sure is still available (the DELAY_MS value gets added on top of this)
          SAFETY_MULTIPLE: 1.4
          SAFETY_DELAY_MS: 0

          # How many ms to wait after each task
          DELAY_MS: 0

  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-${TableName}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  TasksLambdaDynamoPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-TasksLambdaDynamoPolicy'
      Description: Managed policy for the tasks Lambda function launched by CloudFormation
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt DynamoTable.Arn

      # Define the role here, rather than the managed policy on the role, to avoid a circular dependency
      Roles:
        - !Ref TasksLambdaExecutionRole

  TasksLambdaCloudWatchPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-TasksLambdaCloudWatchPolicy'
      Description: Managed policy for the tasks Lambda function launched by CloudFormation
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${TasksLambdaLogGroup}:*"
          - Effect: Allow
            Action:
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${TasksLambdaLogGroup}:*"

      # Define the role here, rather than the managed policy on the role, to avoid a circular dependency
      Roles:
        - !Ref TasksLambdaExecutionRole

  # See https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/147
  # https://typicalrunt.me/2019/09/20/enforcing-least-privilege-when-logging-lambda-functions-to-cloudwatch/
  # WARNING: If the lambda function gets updated, its name will change, so the log group will change, so the old logs will get deleted despite the retention period here.
  TasksLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TasksLambdaFunction}"
      RetentionInDays: 30

  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StatesExecutionRole.Arn
      Definition:
        Comment: Call a task-handling lambda function, retry on failure
        StartAt: LambdaWithRetries
        States:
          LambdaWithRetries:
            Type: Task
            Resource: !GetAtt TasksLambdaFunction.Arn
            Retry:
              - ErrorEquals: [Abort]
                MaxAttempts: 0
              - ErrorEquals: [States.ALL]
                IntervalSeconds: 20
                MaxAttempts: 4
                BackoffRate: 1.2
            End: true

Outputs:
  TableArn:
    Description: The ARN of the DynamoDB table (including the generated stack name)
    Value: !GetAtt DynamoTable.Arn

  TableName:
    Description: The full name of the DynamoDB table (including the generated stack name)
    Value: !Ref DynamoTable

  StateMachineArn:
    Description: The ARN of the state machine that keeps the tasks lambda running
    Value: !Ref StateMachine
