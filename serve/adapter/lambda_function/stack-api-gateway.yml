# https://github.com/awsdocs/amazon-api-gateway-developer-guide/blob/main/cloudformation-templates/HTTP/http-with-jwt-auth.yaml
AWSTemplateFormatVersion: "2010-09-09"

Description: |
  HTTP URL where the auth lambda can be called after a JWT Authorizer check

Parameters:
  Issuer:
    Description: An optional issuer for a JWT check at the /api route. Used in the JwtAuthorizer
    Type: String
    Default: ""

  Audiences:
    Description: An optional space-separated string of audiences that should be allowed access. Used in the JwtAuthorizer
    Type: String
    Default: ""

  CorsOrigins:
    Description: A space-separated list of valid CORS origins that are allowed to call the lambda, or * to allow every origin.
    Type: String
    Default: ""

  LambdaArn:
    Description: The ARN of the lambda to connect to
    Type: String
    MinLength: "1"

  ThrottlingRateLimit:
    Description: Max number of HTTP requests to allow per second over the long term
    Type: Number
    Default: 50

  ThrottlingBurstLimit:
    Description: Max number of HTTP requests to allow per second for a short burst
    Type: Number
    Default: 200

Conditions:
  UseCors: !Not [!Equals [!Ref "CorsOrigins", ""]]

  UseJwtAuthorizer: !Not [!Equals [!Ref "Issuer", ""]]

Resources:
  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: HTTPS JWT Authorizer for Lambda
      Name: !Sub '${AWS::StackName}-AuthJwtChecker'
      ProtocolType: HTTP
      CorsConfiguration: !If
        - UseCors
        - AllowCredentials: true
          AllowOrigins: !Split [' ', !Ref CorsOrigins]
          AllowHeaders:
            - '*'
          AllowMethods:
            - '*'
          ExposeHeaders:
            - '*'
          MaxAge: 10
        - !Ref AWS::NoValue

  JwtAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: !Sub '${AWS::StackName}-JwtAuthorizer'
      ApiId: !Ref Api
      AuthorizerType: JWT
      IdentitySource:
        - $request.header.Authorization
      JwtConfiguration:
        Audience: !Split [' ', !Ref Audiences]
        Issuer: !Ref Issuer
    Condition: UseJwtAuthorizer

  V1Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:

      #Â If you choose a name other than $default, it will form part of the invoke URL path
      StageName: $default
      AutoDeploy: true
      Description: Default Stage

      # DeploymentId: !Ref APIDeployment
      ApiId: !Ref Api
      DefaultRouteSettings:
        ThrottlingRateLimit: !Ref ThrottlingRateLimit
        ThrottlingBurstLimit: !Ref ThrottlingBurstLimit

  Integration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref Api
      Description: Fetch HTML file
      IntegrationType: AWS_PROXY
      IntegrationUri: !Ref LambdaArn
      PayloadFormatVersion: "2.0"

  Route:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: $default

      # The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref Integration

  ApiRoute:

    # Could add in AuthorizationScopes too to limit access: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-route.html#cfn-apigatewayv2-route-authorizationscopes
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref Api
      RouteKey: ANY /api/{proxy+}

      # The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
      AuthorizationType: !If [UseJwtAuthorizer, JWT, NONE]
      AuthorizerId: !If [UseJwtAuthorizer, !Ref JwtAuthorizer, 'AWS::NoValue']
      Target: !Join
        - /
        - - integrations
          - !Ref Integration

  APIInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

      # Could tighten this up to just the one route.
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*

Outputs:
  Url:
    Value: !GetAtt Api.ApiEndpoint

  Api:
    Value: !Ref Api

  V1Stage:
    Value: !Ref V1Stage
