AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ReservedConcurrency:
    Description: Max number of Lambdas that can run at the same time, if -1 use unreserved concurrency
    Type: Number
    Default: -1

  EncodedEnvironment:
    Description: An environment dictionary encoded as key|value, pairs. If key or value contains $ , or | they should be prepended with $ and base64 encoded
    Type: String
    Default: ""

  Layers:
    Description: A space separated list of Layer ARNs including version
    Type: String
    Default: ""

  DynamoDbTableArn:
    Description: The ARN of the DynamoDB Table to store output in
    Type: String
    MinLength: "1"

  DynamoDbTableName:
    Description: The Name of the DynamoDB Table to store output in
    Type: String
    MinLength: "1"

Conditions:
  SetReservedConcurrentExecutions: !Not [!Equals [!Ref ReservedConcurrency, -1]]

  HasLayers: !Not [!Equals [!Ref Layers, ""]]

Resources:

  # Html Lambda
  HttpLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:

      # RoleName: !Sub '${AWS::StackName}-HttpLambdaRole'
      RoleName: !Join ["", [!Select [0, !Split ['-', !Sub "${AWS::StackName}"]], HttpLambdaRole]]
      Description: An execution role for a Lambda function launched by CloudFormation
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  HttpLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-HttpLambdaPolicy'
      Description: Managed policy for a Lambda function launched by CloudFormation
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${HttpLambdaLogGroup}:*"
          - Effect: Allow
            Action:
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${HttpLambdaLogGroup}:*"

      # Define the role here, rather than the managed policy on the role, to avoid a circular dependency
      Roles:
        - !Ref HttpLambdaExecutionRole

  # See https://github.com/aws-cloudformation/cloudformation-coverage-roadmap/issues/147
  # https://typicalrunt.me/2019/09/20/enforcing-least-privilege-when-logging-lambda-functions-to-cloudwatch/
  # WARNING: If the lambda function gets updated, its name will change, so the log group will change, so the old logs will get deleted despite the retention period here.
  HttpLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${HttpLambda}"
      RetentionInDays: 30

  HttpLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt HttpLambdaExecutionRole.Arn
      Code: ../../../lambda.zip
      ReservedConcurrentExecutions: !If
        - SetReservedConcurrentExecutions
        - !Ref ReservedConcurrency
        - !Ref AWS::NoValue
      Architectures:
        - arm64
      Timeout: 10
      Runtime: python3.11
      Handler: index.lambda_handler
      MemorySize: 128
      Layers: !If
        - HasLayers
        - !Split [' ', !Ref Layers]
        - !Ref AWS::NoValue
      Environment:
        Variables:
          ENCODED_ENVIRONMENT: !Sub 'KVSTORE_DYNAMODB_TABLE_NAME|${DynamoDbTableName},${EncodedEnvironment}'

  HttpLambdaDynamoPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-HttpLambdaDynamoPolicy'
      Description: Managed policy for the Http Lambda function
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource:
              - !Ref DynamoDbTableArn

      # Define the role here, rather than the managed policy on the role, to avoid a circular dependency
      Roles:
        - !Ref HttpLambdaExecutionRole

Outputs:
  HttpLambdaArn:
    Description: The ARN of the HTML lambda function to invoke
    Value: !GetAtt HttpLambda.Arn

  HttpLambdaExecutionRoleFriendlyName:
    Description: The friendly name of the lambda execution role, useful for adding policies to it in other stacks
    Value: !Ref HttpLambdaExecutionRole
